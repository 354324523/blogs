import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o,c,d as e,f as a,b as i,e as s}from"./app-DWz5k_-z.js";const l="/blogs/assets/CacheAside-B2AlpuIN.png",h="/blogs/assets/WriteReadThrough-DStvCzKV.png",d={},p=s('<p>缓存（Cache）是一种高效的数据存储技术，旨在提高数据访问速度。</p><p>它将频繁访问或最近使用的数据临时存储在更快速但较小的存储介质（如内存）中，以减少从较慢的存储设备（如硬盘或远程服务器）读取数据的次数。以下是一些关于缓存的关键点：</p><h2 id="缓存的读写策略" tabindex="-1"><a class="header-anchor" href="#缓存的读写策略"><span>缓存的读写策略</span></a></h2><p>选择缓存的读写策略是缓存设计中的关键步骤，他直接影响系统的性能、数据一致性和可用性。以下是几种常见的缓存读写策略及其适用场景：</p><h3 id="旁路缓存-cache-aside" tabindex="-1"><a class="header-anchor" href="#旁路缓存-cache-aside"><span>旁路缓存（Cache Aside）</span></a></h3><figure><img src="'+l+'" alt="Cache Aside" tabindex="0" loading="lazy"><figcaption>Cache Aside</figcaption></figure><p><strong>1、读（Cache Read-Aside）</strong></p><ul><li>应用程序首先检查缓存以获取所需数据。如果缓存中存在数据，则直接返回给应用程序。</li><li>如果缓存未命中，应用程序将从数据源（例如数据库）中读取数据，并手动将数据放入缓存中，以便下次访问时直接从缓存中获取。</li></ul><p><strong>2、写（Cache Write-Aside）</strong></p><ul><li>更新数据时，应用程序首先将数据写入数据库。</li><li>然后应用程序使缓存中的相关数据失效（即删除缓存中的数据）。</li></ul><h3 id="cache-aside-pattern下-数据不一致的情况" tabindex="-1"><a class="header-anchor" href="#cache-aside-pattern下-数据不一致的情况"><span>Cache Aside pattern下，数据不一致的情况</span></a></h3><h3 id="cache-aside-pattern下-删除缓存失败的情况" tabindex="-1"><a class="header-anchor" href="#cache-aside-pattern下-删除缓存失败的情况"><span>Cache Aside pattern下，删除缓存失败的情况</span></a></h3><p>Cache-Aside pattern 模式 是先更新数据库，再删除缓存。在删除缓存时，有可能删除失败，导致缓存中的数据是旧的。 在此模式下，要确保删除操作最终要被执行，这样才可以保证数据的最终一致性。以下是一些处理方式:</p><ul><li><strong>重试机制</strong></li><li><strong>延迟双删</strong></li><li><strong>异步任务</strong></li><li><strong>订阅binlog+异步任务</strong></li></ul><h3 id="读写穿透-write-read-through" tabindex="-1"><a class="header-anchor" href="#读写穿透-write-read-through"><span>读写穿透（Write/Read Through）</span></a></h3><figure><img src="'+h+'" alt="Write/Read Through" tabindex="0" loading="lazy"><figcaption>Write/Read Through</figcaption></figure><p><strong>1、读（Read Through）</strong></p><ul><li>应用程序直接访问缓存，如果缓存中存在数据，则直接返回给应用程序。</li><li>如果缓存未命中，缓存系统负责从数据源中读取数据，然后将数据写入缓存，并返回给应用程序。</li></ul><p><strong>Cache-Aside 策略与Read-Through 策略的区别：Cache-Aside 策略需要应用程序负责数据加载到缓存的过程，而 Read-Through 策略则将这一过程交给缓存系统处理。</strong></p><p><strong>2、写（Write Through）</strong></p><ul><li>应用程序尝试写入数据到缓存。</li><li>如果缓存中存在相应数据，则数据将被写入缓存，并同步更新数据库。</li><li>如果缓存未命中，即缓存中不存在需要写入的数据，则应用程序负责将数据写入数据库。</li></ul><h3 id="异步缓存写入write-behind-caching-write-back" tabindex="-1"><a class="header-anchor" href="#异步缓存写入write-behind-caching-write-back"><span>异步缓存写入Write-Behind Caching (Write-Back)</span></a></h3><p><strong>1、读</strong></p><ul><li>当应用程序需要读取数据时，首先会检查缓存。</li><li>如果数据在缓存中存在且是最新的，则直接从缓存中获取数据并返回给应用程序。</li><li>如果数据在缓存中是“脏数据”或不存在，缓存系统会从持久存储中获取最新的数据，并更新缓存中的数据，然后返回给应用程序。</li></ul><p><strong>2、写</strong></p><ul><li>应用程序尝试写入数据到缓存。</li><li>如果缓存中存在相应数据，则数据将被写入缓存，同时将缓存数据设置为脏的，然后<strong>立马返回</strong>。</li><li>缓存系统会根据一定的策略（如时间间隔、数据量、缓存空间等）来<strong>批量异步更新</strong>的方式将“脏数据”写回到持久存储中。即有一定的延迟性，这个策略通常由系统管理员根据应用需求进行配置。</li></ul><p>异步缓存写入和读写穿透很相似，两者都是由<code>cache</code>服务来负责<code>cache</code>和<code>DB</code>的读写。</p><p>两者最大的不同点就是：读写穿透是同步更新<code>DB</code>和<code>cache</code>，而异步缓存写入则是只更新<code>cache</code>，不直接更新<code>DB</code>，而是改为异步批量的方式更新<code>DB</code>。<strong>InnoDB Buffer Pool机制就是采用这种模式</strong>。</p><h3 id="如何选择合适的策略" tabindex="-1"><a class="header-anchor" href="#如何选择合适的策略"><span>如何选择合适的策略？</span></a></h3><p>参考链接：</p>',30),g={href:"https://archmanual.com/backend/redis/consistent.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://xiaolincoding.com/redis/architecture/mysql_redis_consistency.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://mp.weixin.qq.com/s/bWofuM5eS2Q8ylF-4AD0kA",target:"_blank",rel:"noopener noreferrer"};function E(A,B){const t=n("ExternalLinkIcon");return o(),c("div",null,[p,e("blockquote",null,[e("p",null,[e("a",g,[a("Redis 双写一致性"),i(t)])]),e("p",null,[e("a",u,[a("数据库和缓存如何保证一致性｜小林 coding"),i(t)])]),e("p",null,[e("a",_,[a("3种常用的缓存读写策略详解"),i(t)])])])])}const f=r(d,[["render",E],["__file","缓存类型有哪些？经典的缓存策略有哪些？.html.vue"]]),b=JSON.parse('{"path":"/redis/%E7%BC%93%E5%AD%98%E7%AF%87/%E7%BC%93%E5%AD%98%E7%B1%BB%E5%9E%8B%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E7%BB%8F%E5%85%B8%E7%9A%84%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F.html","title":"缓存类型有哪些？经典的缓存策略有哪些？","lang":"zh-CN","frontmatter":{"title":"缓存类型有哪些？经典的缓存策略有哪些？","order":1,"category":["Redis"],"description":"缓存（Cache）是一种高效的数据存储技术，旨在提高数据访问速度。 它将频繁访问或最近使用的数据临时存储在更快速但较小的存储介质（如内存）中，以减少从较慢的存储设备（如硬盘或远程服务器）读取数据的次数。以下是一些关于缓存的关键点： 缓存的读写策略 选择缓存的读写策略是缓存设计中的关键步骤，他直接影响系统的性能、数据一致性和可用性。以下是几种常见的缓存读...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/blogs/redis/%E7%BC%93%E5%AD%98%E7%AF%87/%E7%BC%93%E5%AD%98%E7%B1%BB%E5%9E%8B%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E7%BB%8F%E5%85%B8%E7%9A%84%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"皮卡丘"}],["meta",{"property":"og:title","content":"缓存类型有哪些？经典的缓存策略有哪些？"}],["meta",{"property":"og:description","content":"缓存（Cache）是一种高效的数据存储技术，旨在提高数据访问速度。 它将频繁访问或最近使用的数据临时存储在更快速但较小的存储介质（如内存）中，以减少从较慢的存储设备（如硬盘或远程服务器）读取数据的次数。以下是一些关于缓存的关键点： 缓存的读写策略 选择缓存的读写策略是缓存设计中的关键步骤，他直接影响系统的性能、数据一致性和可用性。以下是几种常见的缓存读..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"皮卡丘"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"缓存类型有哪些？经典的缓存策略有哪些？\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"皮卡丘\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"缓存的读写策略","slug":"缓存的读写策略","link":"#缓存的读写策略","children":[{"level":3,"title":"旁路缓存（Cache Aside）","slug":"旁路缓存-cache-aside","link":"#旁路缓存-cache-aside","children":[]},{"level":3,"title":"Cache Aside pattern下，数据不一致的情况","slug":"cache-aside-pattern下-数据不一致的情况","link":"#cache-aside-pattern下-数据不一致的情况","children":[]},{"level":3,"title":"Cache Aside pattern下，删除缓存失败的情况","slug":"cache-aside-pattern下-删除缓存失败的情况","link":"#cache-aside-pattern下-删除缓存失败的情况","children":[]},{"level":3,"title":"读写穿透（Write/Read Through）","slug":"读写穿透-write-read-through","link":"#读写穿透-write-read-through","children":[]},{"level":3,"title":"异步缓存写入Write-Behind Caching (Write-Back)","slug":"异步缓存写入write-behind-caching-write-back","link":"#异步缓存写入write-behind-caching-write-back","children":[]},{"level":3,"title":"如何选择合适的策略？","slug":"如何选择合适的策略","link":"#如何选择合适的策略","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.61,"words":1083},"filePathRelative":"redis/缓存篇/缓存类型有哪些？经典的缓存策略有哪些？.md","excerpt":"<p>缓存（Cache）是一种高效的数据存储技术，旨在提高数据访问速度。</p>\\n<p>它将频繁访问或最近使用的数据临时存储在更快速但较小的存储介质（如内存）中，以减少从较慢的存储设备（如硬盘或远程服务器）读取数据的次数。以下是一些关于缓存的关键点：</p>\\n<h2>缓存的读写策略</h2>\\n<p>选择缓存的读写策略是缓存设计中的关键步骤，他直接影响系统的性能、数据一致性和可用性。以下是几种常见的缓存读写策略及其适用场景：</p>\\n<h3>旁路缓存（Cache Aside）</h3>\\n<figure><figcaption>Cache Aside</figcaption></figure>\\n<p><strong>1、读（Cache Read-Aside）</strong></p>","autoDesc":true}');export{f as comp,b as data};
