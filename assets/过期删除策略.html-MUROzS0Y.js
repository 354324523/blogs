import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as n,c as a,d as e,f as l,b as i,e as c}from"./app-DWz5k_-z.js";const d="/blogs/assets/redisDb-r96s0mph.png",p={},r=c(`<blockquote><p>Redis是可以对key设置过期时间的，因此需要有相应的机制将已过期的键值对删除，而做这个工作的就是过期键值对删除策略。</p></blockquote><h2 id="如何设置过期时间" tabindex="-1"><a class="header-anchor" href="#如何设置过期时间"><span>如何设置过期时间？</span></a></h2><p>设置key过期时间，共有4种命令：</p><ul><li><code>expire &lt;key&gt; &lt;seconds&gt;</code>：设置key在seconds后过期，比如<code>expire key 100</code>表示设置key在100秒之后过期。</li><li><code>pexpire &lt;key&gt; &lt;milliseconds&gt;</code>：设置key在milliseconds后过期，比如<code>pexpire key 100</code>表示设置key在100毫秒后过期。</li><li><code>expireat &lt;key&gt; &lt;timestamp&gt;</code>：设置key在某个时间戳（精确到秒）之后过期，比如<code>expireat key 1704038400</code>表示设置key在时间戳1704038400（精确到秒）后过期。</li><li><code>expireat &lt;key&gt; &lt;timestamp&gt;</code>：设置key在某个时间戳（精确到毫秒）之后过期，比如<code>pexpireat key 1704038400000</code>表示设置key在时间1704038400000（精确到毫秒）后过期。</li></ul><p>当然在设置字符串时也可以同时对key设置过期时间，共有三种命令：</p><ul><li><code>set &lt;key&gt; &lt;value&gt; ex &lt;seconds&gt;</code>：设置key时同时设置多少秒后过期。</li><li><code>set &lt;key&gt; &lt;value&gt; px &lt;milliseconds&gt;</code>：设置key时同时设置多少毫秒后过期。</li><li><code>setex &lt;key&gt; &lt;ttl&gt; &lt;value&gt;</code>：设置key时同时设置多少秒后过期，等同于<code>set &lt;key&gt; &lt;value&gt; ex &lt;seconds&gt;</code>。</li></ul><p>如果想查看某个key对过期时间，有两种命令（如果返回-2则表示key不存在，如果返回-1则表示永不超时）：</p><ul><li><code>ttl &lt;key&gt;</code>：返回key过期还剩多少秒。</li><li><code>pttl &lt;key&gt;</code>：返回key过期还剩多少毫秒。</li></ul><p>当然，如果突然反悔，取消key的过期时间，则可以使用：</p><ul><li><code>persist &lt;key&gt;</code>：取消key的过期时间。</li></ul><h2 id="如何判断一个key已经过期" tabindex="-1"><a class="header-anchor" href="#如何判断一个key已经过期"><span>如何判断一个KEY已经过期？</span></a></h2><p>当我们对一个key设置过期时间时，Redis会把该key带上过期时间存储到一个过期字典中，也就是说「过期字典」保存了数据库中所有key的过期时间。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisDb</span> <span class="token punctuation">{</span>
    dict <span class="token operator">*</span>dict<span class="token punctuation">;</span> <span class="token comment">//所有的键值对</span>
    dict <span class="token operator">*</span>expires<span class="token punctuation">;</span> <span class="token comment">//设置了过期时间的键值对</span>
   <span class="token comment">//... 省略了其他属性</span>
<span class="token punctuation">}</span> redisDb<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+'" alt="redisDb" tabindex="0" loading="lazy"><figcaption>redisDb</figcaption></figure><p>过期字典实际上是一个哈希表，哈希表最大的好处就是让我们可以用O(1)的时间复杂度来快速查找，当我们查找一个key时，Redis首先会检查该key是否存在于过期字典中：</p><ul><li>如果不存在，则正常读取键值；</li><li>如果存在，则会获取该key的过期时间，然后与当前系统时间比对，如果比系统时间大则证明未过期，反之则证明该key已过期；</li></ul><h2 id="过期删除策略有哪些" tabindex="-1"><a class="header-anchor" href="#过期删除策略有哪些"><span>过期删除策略有哪些？</span></a></h2><p>如果将一个过期的key删除，我们一般有三种策略：</p><blockquote><p><strong>定时删除</strong></p></blockquote><p>在设置KEY的过期时间时同时创建一个定时事件，当时间到达时，由事件处理器自动执行key的删除操作。</p><ul><li>优点：可以保证过期key会被尽快删除，也就是内存尽快释放。因此，定时删除策略对内存友好。</li><li>缺点：在过期key较多的情况下，删除过期KEY会占用相当一部分CPU时间，在内存不紧张但CPU紧张的情况下，将CPU用于删除和当前任务无关的过期键上，无疑会对服务器的响应时间和吞吐量造成影响。所以，定时删除策略对CPU不友好。</li></ul><blockquote><p><strong>惰性删除</strong></p></blockquote><p>不主动删除key，每次从数据库访问key时，都检测key是否过期，如果过期则删除该key。</p><ul><li>优点：因为只有访问时才会检测key是否过期，所以此策略只会使用很少的系统资源，因此，惰性删除策略对CPU友好。</li><li>缺点：如果一个key已经过期，但是这个key一直没有被访问到，它所占用的内存就不会释放，造成了一定的内存空间浪费。所以，惰性删除策略对内存不友好。</li></ul><blockquote><p><strong>定期扫描</strong></p></blockquote><p>每隔一段时间「随机」从数据库中取出一定数量的key进行检查，并删除其中过期的key。</p><ul><li>优点： <ul><li>通过限制执行时长和执行频率来减少删除操作对CPU对影响。</li><li>同时也能删除一部分过期数据，减少了过期键对空间的无效占用。</li></ul></li><li>缺点： <ul><li>难以确定删除执行时长和频率，内存清理方面没定时删除效果好，使用资源方面没有惰性删除使用的少。</li><li>如果执行太频繁，定期删除策略会变的和定时删除策略一样，对CPU不友好。</li><li>如果执行太少，又会和惰性删除一样，过期key得不到及时释放。</li></ul></li></ul><h2 id="redis的过期删除策略是什么" tabindex="-1"><a class="header-anchor" href="#redis的过期删除策略是什么"><span>Redis的过期删除策略是什么？</span></a></h2><p><strong>Redis选择「惰性删除」+「定期扫描」这两种策略配合使用，以求合理使用CPU时间和避免内存浪费之间取得平衡。</strong></p><blockquote><p>Redis是如何实现惰性删除的</p></blockquote><p>Redis在访问或者修改key之前都会调用expireIfNeeded函数对其进行检查，检查key是否过期：</p><ul><li>如果过期则删除该key，至于是异步删除还是同步删除，根据 <code>lazyfree_lazy_expire</code> 参数配置决定（Redis 4.0版本之后开始提供参数），然后返回null给客户端；</li><li>如果没有过期，不做任何处理，正常返回键值给客户端；</li></ul><blockquote><p>Redis是如何实现定时删除的</p></blockquote><p>在 Redis 中，默认每秒进行 10 次过期检查一次数据库，此配置可通过 Redis 的配置文件 redis.conf 进行配置，配置键为 <code>hz</code> 它的默认值是10。</p><ol><li>从过期字典中随机抽取 20 个 key；</li><li>检查这 20 个 key 是否过期，并删除已过期的 key；</li><li>如果本轮检查的已过期 key 的数量，超过 5 个（20/4），也就是「已过期 key 的数量」占比「随机抽取 key 的数量」大于 25%，则继续重复步骤 1；如果已过期的 key 比例小于 25%，则停止继续删除过期 key，然后等待下一轮再检查。</li><li>Redis 为了保证定期删除不会出现循环过度，导致线程卡死现象，为此增加了定期删除循环流程的时间上限，默认不会超过 25ms。</li></ol><p><strong>值得说明的是，由于随机选择的特性，可能存在一些过期的key长时间未被删除掉，为了避免这种情况，在Redis6.0及之后的版本，已经改成了顺序遍历字典表的方式，同时会记录下标。</strong></p><h4 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接：</span></a></h4>',37),k={href:"https://xiaolincoding.com/redis/module/strategy.html#%E8%BF%87%E6%9C%9F%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5",target:"_blank",rel:"noopener noreferrer"},y={href:"https://blog.csdn.net/ldw201510803006/article/details/126093439",target:"_blank",rel:"noopener noreferrer"};function u(g,m){const t=o("ExternalLinkIcon");return n(),a("div",null,[r,e("blockquote",null,[e("p",null,[e("a",k,[l("Redis过期删除策略"),i(t)])]),e("p",null,[e("a",y,[l("Redis 过期删除策略、惰性删除（lazy-free），深入剖析"),i(t)])])])])}const b=s(p,[["render",u],["__file","过期删除策略.html.vue"]]),_=JSON.parse('{"path":"/redis/%E7%AD%96%E7%95%A5%E7%AF%87/%E8%BF%87%E6%9C%9F%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5.html","title":"Redis过期删除策略","lang":"zh-CN","frontmatter":{"title":"Redis过期删除策略","order":1,"category":["Redis"],"description":"Redis是可以对key设置过期时间的，因此需要有相应的机制将已过期的键值对删除，而做这个工作的就是过期键值对删除策略。 如何设置过期时间？ 设置key过期时间，共有4种命令： expire <key> <seconds>：设置key在seconds后过期，比如expire key 100表示设置key在100秒之后过期。 pexpire <key> ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/blogs/redis/%E7%AD%96%E7%95%A5%E7%AF%87/%E8%BF%87%E6%9C%9F%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5.html"}],["meta",{"property":"og:site_name","content":"皮卡丘"}],["meta",{"property":"og:title","content":"Redis过期删除策略"}],["meta",{"property":"og:description","content":"Redis是可以对key设置过期时间的，因此需要有相应的机制将已过期的键值对删除，而做这个工作的就是过期键值对删除策略。 如何设置过期时间？ 设置key过期时间，共有4种命令： expire <key> <seconds>：设置key在seconds后过期，比如expire key 100表示设置key在100秒之后过期。 pexpire <key> ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"皮卡丘"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis过期删除策略\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"皮卡丘\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"如何设置过期时间？","slug":"如何设置过期时间","link":"#如何设置过期时间","children":[]},{"level":2,"title":"如何判断一个KEY已经过期？","slug":"如何判断一个key已经过期","link":"#如何判断一个key已经过期","children":[]},{"level":2,"title":"过期删除策略有哪些？","slug":"过期删除策略有哪些","link":"#过期删除策略有哪些","children":[]},{"level":2,"title":"Redis的过期删除策略是什么？","slug":"redis的过期删除策略是什么","link":"#redis的过期删除策略是什么","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":5.71,"words":1713},"filePathRelative":"redis/策略篇/过期删除策略.md","excerpt":"<blockquote>\\n<p>Redis是可以对key设置过期时间的，因此需要有相应的机制将已过期的键值对删除，而做这个工作的就是过期键值对删除策略。</p>\\n</blockquote>\\n<h2>如何设置过期时间？</h2>\\n<p>设置key过期时间，共有4种命令：</p>\\n<ul>\\n<li><code>expire &lt;key&gt; &lt;seconds&gt;</code>：设置key在seconds后过期，比如<code>expire key 100</code>表示设置key在100秒之后过期。</li>\\n<li><code>pexpire &lt;key&gt; &lt;milliseconds&gt;</code>：设置key在milliseconds后过期，比如<code>pexpire key 100</code>表示设置key在100毫秒后过期。</li>\\n<li><code>expireat &lt;key&gt; &lt;timestamp&gt;</code>：设置key在某个时间戳（精确到秒）之后过期，比如<code>expireat key 1704038400</code>表示设置key在时间戳1704038400（精确到秒）后过期。</li>\\n<li><code>expireat &lt;key&gt; &lt;timestamp&gt;</code>：设置key在某个时间戳（精确到毫秒）之后过期，比如<code>pexpireat key 1704038400000</code>表示设置key在时间1704038400000（精确到毫秒）后过期。</li>\\n</ul>","autoDesc":true}');export{b as comp,_ as data};
